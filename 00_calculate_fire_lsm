
##Rebecca wd
setwd("C:/Users/rah10/Dropbox (University of Oregon)")

## Bombus wd
#setwd("/Volumes/bombus/lponisio/Dropbox\ (University\ of Oregon)")

rm(list=ls())
# load packages
library(terra)
library(sf)
library(landscapemetrics)
library(purrr)
library(jsonlite)
library(dplyr)

setwd("pnw_survey_saved")

#duplicate rows exist in geography.
stands <- read.csv("data/relational/relational/tables/geography.csv") %>% distinct(Stand, .keep_all = TRUE)

lonlat <- as.matrix(stands[, c("Long", "Lat")])

crdref <- "+proj=latlong +datum=NAD83"
sp.stands <- vect(lonlat, atts=stands[, c("Stand", "FireName")], crs=crdref)

raster.hol <- rast("spatial_data/analysis_rasters_and_points2023/holiday_raster.tif")
sp.stands <- project(sp.stands, crs(raster.hol))

plot(raster.hol)
points(sp.stands, cex=2)

holiday.pts <- sp.stands[sp.stands$FireName == "Holiday",]
dixie.pts <- sp.stands[sp.stands$FireName == "Dixie",]
beachie.pts <- sp.stands[sp.stands$FireName == "Beachie",]
claremont.pts <- sp.stands[sp.stands$FireName == "Claremont",]

save.dir <- "spatial_data/analysis_rasters_and_points2023/sp_points"

writeVector(holiday.pts, file.path(save.dir, "holiday_points.shp"), overwrite=TRUE)
writeVector(dixie.pts, file.path(save.dir, "dixie_points.shp"), overwrite=TRUE)
writeVector(beachie.pts, file.path(save.dir, "beachie_points.shp"), overwrite=TRUE)
writeVector(claremont.pts, file.path(save.dir, "claremont_points.shp"), overwrite=TRUE)


plot(raster.hol)
points(holiday.pts, cex=2)



################################################################################
#function: calculate_lsm_for_buffers_and_sites
#
#This function calculates pyrodiversity metrics for a given fire and sites of
#interest within the fire. The pyrodiversity metrics are calculated for each
#buffer of interest around each site using the landscapemetrics package in R.
#The function first loads the raw raster file and reclassifies it based on severity
#categories. Then, it loads the point data as an sf object and creates buffers
#around the sites of interest. Next, it crops the raster file to each buffer
#extent and calculates the chosen pyrodiversity metrics for each buffer.
#Finally, it saves the resulting metrics as a CSV file in the specified directory.
#
################################################################################

calculate_lsm_for_buffers_and_sites <- function(fire_name, #A character string indicating the name of the fire for which the metrics are being calculated.
                                                pre_fire_raster, #The file name of a raster file that contains information about the prefire nbr. The raster file is loaded as a terra object.
                                                dnbr_fire_raster, #The file name of a raster file that contains information about the postfire nbr. The raster file is loaded as a terra object.
                                                fire_site_points, #The file name of a shapefile that contains information about sites of interest within the fire. The shapefile is loaded as an sf object.
                                                buffer_sizes, #A numeric vector indicating the buffer sizes (in meters) to be used for the analysis.
                                                chosen_metrics #A character vector specifying the pyrodiversity metrics to be calculated for each buffer and site. These metrics are calculated using the landscapemetrics package.
){
  #Load a raster file as a terra object (prefire raster_file)
  pre_raster_file <- rast(pre_fire_raster)
  
  #band 4 minus band 5
  pre_top <- lapp(sds(list(pre_raster_file[[4]], pre_raster_file[[5]])), 
                  fun = function(r1, r2) { return( r1 - r2) })
  
  pre_bottom <- lapp(sds(list(pre_raster_file[[4]], pre_raster_file[[5]])), 
                     fun = function(r1, r2) { return( r1 + r2) })
  
  
  
  #use bands 4 and 5 to calculate nbr
  pre_raster_nbr <- pre_top/pre_bottom
  
  plot(pre_raster_nbr)
  
  
  
  #Load a raster file as a terra object (postfire raster_file)
  dnbr_raster_file <- rast(dnbr_fire_raster)
  
  plot(dnbr_raster_file)
  #browser()
  #calculate relativized dnbr
  relativized_dnbr <- (dnbr_raster_file)/(pre_raster_nbr+1.001)
  plot(relativized_dnbr)
  
  
  # Set all values less than or equal to zero to zero
  dnbr_raster <- terra::clamp(relativized_dnbr, lower=0, upper=Inf)
  ## Plot the dnbr raster to check it looks correct
  plot(dnbr_raster)
  print(ext(dnbr_raster))
  #browser()
  # Create a new SpatRaster with the same extent and resolution as the original raster
  new_raster <- terra::rast(terra::ext(dnbr_raster), nrow = nrow(dnbr_raster), ncol = ncol(dnbr_raster))
  
  crs(new_raster) <- "+proj=utm +zone=10 +datum=NAD83"
  
  
  # Load your point data as an sf object
  sp.points <- st_read(fire_site_points)
  
  # If the CRS values are different, transform one of them to match the other
  if (st_crs(sp.points) != crs(pre_raster_file)) {
    sp.points <- st_transform(sp.points, crs(pre_raster_file))
  }
  
  print(ext(sp.points))
  
  extracted.sev <- terra::extract(dnbr_raster, vect(sp.points)) %>%
    select(-ID)
  
  sp.points$ContExtractedSeverity <- extracted.sev
  
  # Reclassify the raster based on multiple boolean statements
  #these cutoffs are from Drivers of burn severity in the northern Cascade Range, Washington, USA 
  #chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https://www.fs.usda.gov/pnw/fera/publications/fulltext/cansler2011_thesis.pdf
  new_raster[] <- ifelse(dnbr_raster[] < 69, 1, #unburned
                         ifelse(dnbr_raster[] < 316, 2, # low severity
                                ifelse(dnbr_raster[] < 641, 3, #moderate severity
                                       4))) #high severity
  
  cat.extracted.sev <- terra::extract(new_raster, vect(sp.points)) %>%
    select(-ID)
  
  sp.points$CatExtractedSeverity <- cat.extracted.sev
  
  # Plot the new raster to check it looks correct
  plot(new_raster)
  crs(new_raster) <- "+proj=utm +zone=10 +datum=NAD83"
  
  
  
  #create buffers
  buffer_widths <- (buffer_sizes) ###DOUBLE CHECK THIS IS IN METERS AND NOT RASTER UNITS SOMEHOW?
  buffers <- list()
  
  for (i in seq_along(buffer_widths)) {
    buffer_list <- list()
    for (j in seq_along(unique(sp.points$Stand))) {
      site_buffer <- st_buffer(sp.points[sp.points$Stand == j,], buffer_widths[i])
      buffer_list[[j]] <- site_buffer
    }
    buffers[[i]] <- buffer_list
  }
  
  # create a list of buffer rasters
  buffer_rasters <- list()
  
  for (i in seq_along(buffer_widths)) {
    buffer_list <- list()
    for (j in unique(sp.points$Stand)) {
      # create buffer for current site
      site_buffer <- st_buffer(sp.points[sp.points$Stand == j,], buffer_widths[i])
      # crop the raster to the buffer extent
      site_raster <- crop(new_raster, ext(site_buffer))
      # add site raster to buffer list
      buffer_list[[j]] <- site_raster
    }
    # add buffer list for current buffer width to buffer_rasters
    buffer_rasters[[i]] <- buffer_list
  }
  
  # Calculate local pyrodiversity metrics for each site in each buffer
  metric_names <- c(chosen_metrics)
  
  # Initialize an empty list to store the results
  metric_results <- list()
  
  for (i in seq_along(buffer_widths)) {
    metric_results[[i]] <- list()
    for (j in seq_along(unique(sp.points$Stand))) {
      # Extract the buffer for the current site from the list of buffer rasters
      buffer_raster <- buffer_rasters[[i]][[j]]
      # Calculate landscape metrics for the current buffer
      metric_result <- landscapemetrics::calculate_lsm(buffer_raster, what = metric_names)
      # Add additional columns to the metric result data frame
      metric_result$Buffer <- buffer_widths[i]
      metric_result$Stand <- sp.points$Stand[j]
      ext.sev <- sp.points$CatExtractedSeverity[j,]
      metric_result$CatExtractedSeverity <- ext.sev
      ext.sev.cont <- sp.points$ContExtractedSeverity[j,]
      metric_result$ContExtractedSeverity <- ext.sev.cont
      # Map the values of the class column to severity levels
      metric_result$Severity <- ifelse(metric_result$class == 1, "Unburned",
                                       ifelse(metric_result$class == 2, "Low",
                                              ifelse(metric_result$class == 3, "Moderate", "High")))
      metric_results[[i]][[j]] <- metric_result
      print(paste('site metrics calculated for stand', j, 'buffer', i))
    }
    print(paste('metrics calculated for all sites in buffer', i))
    #browser()
  }
  return(metric_results)
}




################################################################################

#these inputs will be the same for all fires so set outside the function

buffer_sizes <- c(500, 1000, 1500)

chosen_metrics <- c(#'lsm_p_area', #patch area (patch level)
  #'lsm_p_para', #patch perimeter area ratio
  #'lsm_c_area_cv', #Coefficient of variation of patch area (class level)
  #'lsm_c_area_mn', #Mean of patch area (class level)
  #'lsm_c_area_sd', #Standard deviation of patch area (class level)
  'lsm_c_ai', #aggregation index (class level)
  "lsm_c_ed", #edge density (class level)
  'lsm_c_np', #class level number of patches
  'lsm_c_ca', #total class area
  #'lsm_c_clumpy', #patch clumpiness
  'lsm_c_lpi', #largest patch index class
  #'lsm_c_pd', #patch density
  #'lsm_l_area_cv', #Coefficient of variation of patch area (landscape level)
  #'lsm_l_area_mn', #Mean of patch area (landscape level)
  #'lsm_l_area_sd', #Standard deviation of patch area (landscape level)
  #'lsm_l_ai', #aggregation index (landscape level)
  'lsm_l_np', #landscape level number of patches
  "lsm_l_ed", #landscape edge density
  #'lsm_l_contag', #connectance
  #'lsm_l_msidi', #modified simpsons diversity index
  #'lsm_l_msiei', #modified simpsons evenness index
  'lsm_l_pr', #patch richness
  'lsm_l_shdi', #shannon diversity index
  #'lsm_l_shei', #shannons evenness index
  'lsm_l_sidi', #simpsons diversity index
  'lsm_l_siei', #simpsons evenness index
  'lsm_l_te' #total edge
)
#############################################################################
# QUESTION>>>>>>>>> which metrics do we want? list_lsm() will list all
# options within landscapemetrics package
#############################################################################

save_path <- "spatial_data/analysis_rasters_and_points2023/metrics"

dir.create(save_path, showWarnings = FALSE)
################################################################################


###This function outputs a dataframe in csv with the following columns
# buffer_index: The index of the buffer used for the analysis.
# site_index: The index of the site for which the landscape metrics were calculated.
# layer: The name of the raster layer used to calculate the landscape metric. Only 1 layer in these files
# level: The spatial scale or level of analysis used to calculate the landscape metric. For example, a metric calculated at the patch level would have level = "patch".
# class: The numeric fire severity class
# id: The patch number for patch level metrics.
# metric: The abbreviated name of the landscape metric calculated.
# value: The value of the landscape metric calculated.
# buffer: The buffer width used for the analysis.
# site: The site ID for which the landscape metric was calculated.
# severity: The severity level of the site, where 1 = 'Unburned', 2 = 'Low', 3='Moderate/Low', 4='Moderate/High', and 5='High'.

#holiday fire lsm
holiday_lsm <- calculate_lsm_for_buffers_and_sites(fire_name = 'holiday',
                                                   pre_fire_raster = 'spatial_data/analysis_rasters_and_points2023/holiday_prefire_nbr.tif',
                                                   dnbr_fire_raster = 'spatial_data/analysis_rasters_and_points2023/holiday_raster.tif',
                                                   fire_site_points = 'spatial_data/analysis_rasters_and_points2023/sp_points/holiday_points.shp',
                                                   buffer_sizes = buffer_sizes,
                                                   chosen_metrics = chosen_metrics)
tidy_holiday_lsm <- map_dfr(holiday_lsm, ~map_dfr(., ~as.data.frame(jsonlite::flatten(.x))))
write.csv(tidy_holiday_lsm, file.path(save_path, 'holiday_metrics.csv'), row.names = FALSE)


#beachie fire lsm
beachie_lsm <- calculate_lsm_for_buffers_and_sites(fire_name = 'beachie',
                                                   pre_fire_raster =  'spatial_data/analysis_rasters_and_points2023/beachie_prefire_nbr.tif',         
                                                   dnbr_fire_raster = 'spatial_data/analysis_rasters_and_points2023/beachie_raster.tif',
                                                   fire_site_points = 'spatial_data/analysis_rasters_and_points2023/sp_points/beachie_points.shp',
                                                   buffer_sizes = buffer_sizes,
                                                   chosen_metrics = chosen_metrics)
tidy_beachie_lsm <- map_dfr(beachie_lsm, ~map_dfr(., ~as.data.frame(jsonlite::flatten(.x))))
write.csv(tidy_beachie_lsm, file.path(save_path, 'beachie_metrics.csv'), row.names = FALSE)


#giving error: extents do not overlap... 
claremont_lsm <- calculate_lsm_for_buffers_and_sites(fire_name = 'claremont',
                                                     pre_fire_raster = 'spatial_data/analysis_rasters_and_points2023/claremont_prefire_nbr.tif',
                                                     dnbr_fire_raster = 'spatial_data/analysis_rasters_and_points2023/claremont_raster.tif',
                                                     fire_site_points = 'spatial_data/analysis_rasters_and_points2023/sp_points/claremont_points.shp',
                                                     buffer_sizes = buffer_sizes,
                                                     chosen_metrics = chosen_metrics)
tidy_claremont_lsm <- map_dfr(claremont_lsm, ~map_dfr(., ~as.data.frame(jsonlite::flatten(.x))))
write.csv(tidy_claremont_lsm, file.path(save_path, 'claremont_metrics.csv'), row.names = FALSE)


#dixie fire lsm
dixie_lsm <- calculate_lsm_for_buffers_and_sites(fire_name = 'dixie',
                                                 pre_fire_raster = 'spatial_data/analysis_rasters_and_points2023/dixie_prefire_nbr.tif',
                                                 dnbr_fire_raster = 'spatial_data/analysis_rasters_and_points2023/dixie_raster.tif',
                                                 fire_site_points = 'spatial_data/analysis_rasters_and_points2023/sp_points/dixie_points.shp',
                                                 buffer_sizes = buffer_sizes,
                                                 chosen_metrics = chosen_metrics)
tidy_dixie_lsm <- map_dfr(dixie_lsm, ~map_dfr(., ~as.data.frame(jsonlite::flatten(.x))))
write.csv(tidy_dixie_lsm, file.path(save_path, 'dixie_metrics.csv'), row.names = FALSE)


#### need to double check stands are assigned to correct fires,
# seems potentially ready now but waiting to hear back from NCASI crew
# some stands give warning "number of classes must be >=2 for contag
# but some of the unburned sites only have unburned class
# so contag is set to NA


#### troubleshooting claremont

claremont_lsm <- calculate_lsm_for_buffers_and_sites(fire_name = 'claremont',
                                                     pre_fire_raster = 'spatial_data/analysis_rasters_and_points2023/claremont_prefire_nbr.tif',
                                                     dnbr_fire_raster = 'spatial_data/analysis_rasters_and_points2023/claremont_raster.tif',
                                                     fire_site_points = 'spatial_data/analysis_rasters_and_points2023/sp_points/claremont_points.shp',
                                                     buffer_sizes = buffer_sizes,
                                                     chosen_metrics = chosen_metrics)



#Load a raster file as a terra object (prefire raster_file)
pre_raster_file <- rast('spatial_data/analysis_rasters_and_points2023/claremont_prefire_nbr.tif')

#band 4 minus band 5
pre_top <- lapp(sds(list(pre_raster_file[[4]], pre_raster_file[[5]])), 
                fun = function(r1, r2) { return( r1 - r2) })

pre_bottom <- lapp(sds(list(pre_raster_file[[4]], pre_raster_file[[5]])), 
                   fun = function(r1, r2) { return( r1 + r2) })



#use bands 4 and 5 to calculate nbr
pre_raster_nbr <- pre_top/pre_bottom

plot(pre_raster_nbr)



#Load a raster file as a terra object (postfire raster_file)
dnbr_raster_file <- rast('spatial_data/analysis_rasters_and_points2023/claremont_raster.tif')

plot(dnbr_raster_file)
#browser()
#calculate relativized dnbr
relativized_dnbr <- (dnbr_raster_file)/(pre_raster_nbr+1.001)
plot(relativized_dnbr)


# Set all values less than or equal to zero to zero
dnbr_raster <- terra::clamp(relativized_dnbr, lower=0, upper=Inf)
## Plot the dnbr raster to check it looks correct
plot(dnbr_raster)
#browser()
# Create a new SpatRaster with the same extent and resolution as the original raster
new_raster <- terra::rast(terra::ext(dnbr_raster), nrow = nrow(dnbr_raster), ncol = ncol(dnbr_raster))

crs(new_raster) <- "+proj=utm +zone=10 +datum=NAD83"


# Load your point data as an sf object
sp.points <- st_read('spatial_data/analysis_rasters_and_points2023/sp_points/claremont_points.shp')

plot(dnbr_raster)
points(sp.points)
#ext(dnbr_raster) <- ext(sp.points)

# If the CRS values are different, transform one of them to match the other
if (st_crs(sp.points) != st_crs(pre_raster_file)) {
  sp.points <- st_transform(sp.points, crs=st_crs(pre_raster_file))
}

raster_extent <- ext(dnbr_raster)
points_extent <- ext(sp.points)

if (raster_extent < points_extent){
  
  dnbr_raster <- raster::setExtent(dnbr_raster, points_extent, keepres = TRUE)
}
